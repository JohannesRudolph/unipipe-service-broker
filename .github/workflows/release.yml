name: Release

on:
  push: # trigger whenever a new version tag gets pushed https://github.community/t/how-to-run-github-actions-workflow-only-for-new-tags/16075/23
    tags: [ v* ]

jobs:
  # note: while repeated gradle builds may seem wasteful, the local docker build workflow is very handy so we do 
  # want to retain it. Unfortunately there's no easy way to extract the built jar from the image and publish that instead
  docker: # build and push docker image (this includes a gradle build running in docker)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: lowercase repository name # docker needs a lowercase name, see https://github.community/t/additional-function-s-lowercase-uppercase/140632
      run: |
        echo "REPO=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
    - uses: docker/build-push-action@v1
      with:
        registry: ghcr.io
        repository: ${{ env.REPO }}
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
        tag_with_ref: true
        push: ${{ startsWith(github.ref, 'refs/tags/') }}
        add_git_labels: true
  release: # build self executable jar (another gradle build, this time locally)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew :bootJar -x test
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./build/libs/generic-osb-api-1.0.0.jar
        asset_name: generic-osb-api.jar
        asset_content_type: application/zip
